<?php

/**
 * @file
 * Install file for dgi_standardizations_dgi_repository_item.
 */

use Drupal\Core\Database\Database;
use \Drupal\field\Entity\FieldConfig;
use \Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_update_N().
 *
 * Updates the paragraph field_title. Adapted from
 * https://blog.42mate.com/change-field-type-with-existing-data-on-drupal-8/.
 */
function dgi_standardizations_dgi_repository_item_update_8101() {
  $table = 'paragraph__field_title';
  $fieldName = 'field_title';
  $entityType = 'paragraph';
  $currentRows = NULL;
  $newFieldsList = [];
  $fieldStorage = FieldStorageConfig::loadByName($entityType, $fieldName);

  if (is_null($fieldStorage)) {
    return;
  }

  $db = Database::getConnection();
  // Get all current data from DB.
  if ($db->schema()->tableExists($table)) {
    // The table data to restore after the update is completed.
    $currentRows = $db->select($table, 'n')
      ->fields('n')
      ->execute()
      ->fetchAll();
  }

  // Use existing field config for new field.
  foreach ($fieldStorage->getBundles() as $bundle => $label) {
    $field = FieldConfig::loadByName($entityType, $bundle, $fieldName);
    $newField = $field->toArray();
    $newField['field_type'] = 'string_long';
    $newField['settings'] = [];
    $newFieldsList[] = $newField;
  }

  // Deleting field storage which will also delete bundles(fields).
  $newFieldStorage = $fieldStorage->toArray();
  $newFieldStorage['type'] = 'string_long';
  $newFieldStorage['settings'] = [];

  $fieldStorage->delete();

  // Purge field data now to allow new field and field_storage with same name
  // to be created.
  field_purge_batch(40);

  // Create new field storage.
  $newFieldStorage = FieldStorageConfig::create($newFieldStorage);
  $newFieldStorage->save();

  // Create new fields.
  foreach ($newFieldsList as $nfield) {
    $nfieldConfig = FieldConfig::create($nfield);
    $nfieldConfig->save();
  }

  // Restore existing data in new table.
  if (!is_null($currentRows)) {
    foreach ($currentRows as $row) {
      $db->insert($table)
        ->fields((array) $row)
        ->execute();
    }
  }
}
